{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 AndaleMono;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red246\green246\blue239;\red53\green57\blue60;\red157\green101\blue255;
\red38\green38\blue38;\red255\green255\blue255;\red245\green245\blue245;\red152\green224\blue36;\red224\green213\blue97;
\red0\green0\blue0;\red38\green38\blue38;\red245\green245\blue245;\red246\green246\blue239;\red53\green57\blue60;
\red152\green224\blue36;\red0\green0\blue0;\red88\green209\blue235;\red224\green213\blue97;\red157\green101\blue255;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10340\viewh14580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Question 1\

\b0 What would you expect the code below to print out?\
\
\pard\pardeftab720\sl420\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
numbers = [\cf4 1\cf2 , \cf4 2\cf2 , \cf4 2\cf2 , \cf4 3\cf2 ]\
numbers.uniq\
puts numbers\

\f0\b \cf0 \cb1 \kerning1\expnd0\expndtw0 Answer
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2 \cf0 numbers.unique would print (1, 2, 3) and puts numbers would print out the elements in numbers but in list form:\
1\
2\
2\
3
\f0 \
\

\b Question 2 \

\b0 Describe the difference between ! and ? in Ruby. And explain what would happen in the following scenarios:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl560\partightenfactor0
\ls1\ilvl0\cf5 \cb6 {\listtext	1.	}\expnd0\expndtw0\kerning0
what is\'a0!=\'a0and where should you use it?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl560\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
put\'a0!\'a0before something, like\'a0!user_name\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
put\'a0!\'a0after something, like\'a0words.uniq!\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
put\'a0?\'a0before something\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
put\'a0?\'a0after something\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
put\'a0!!\'a0before something, like\'a0!!user_name
\f3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \cb1 \kerning1\expnd0\expndtw0 \
Answer
\b0 \

\f2 ! mutates the caller while ? is used to answer a question\
\
1. != means not equal and you would use it to state conditions on an object.\
2. This makes your output a boolean but it returns the boolean opposite.\
3. putting ! after something mutates the caller.\
4. \
5. You put ? after something if you want an answer to a question.\
6.  !! makes your output a regular boolean 
\f0 \
\
\

\b Question 3\
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3\b0 \cf5 \cb7 \expnd0\expndtw0\kerning0
Replace the word "important" with "urgent" in this string:\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 advice = \cf8 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Few things in life are as important as house training your pet dinosaur."\cf2 \cb1 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \shad0 \

\b Answer
\b0 \

\f2 advice.sub! 'important', 'urgent'\

\f0 \

\b Question 4\
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3\b0 \cf5 \cb7 \expnd0\expndtw0\kerning0
The Ruby Array class has several methods for removing items from the array. Two of them have very similar names. Let's see how they differ:\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 numbers = [\cf4 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 1\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf4 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 2\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf4 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 3\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf4 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 4\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf4 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 5\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 ]\cf6 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb1 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3 \cf5 \cb7 \shad0 What do the following method calls do (assume we res\cb6 et\'a0
\f1 numbers
\f3 \'a0to \cb7 the original array between method calls)?\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 numbers.\cf9 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 delete_at\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 (\cf4 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 1\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 )\
numbers.\cf9 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 delete\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 (\cf4 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 1\cf2 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 )\cb1 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \kerning1\expnd0\expndtw0 \shad0 \
Answer
\b0 \

\f2 \cb6 delete_at() -  deletes the element at the indicated index () and then returns the deleted element.\cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 \
\pard\pardeftab720\sl320\partightenfactor0
\cf10 delete  - deletes all instances of the element from the object and returns the last deleted element.\
\

\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 Question 5\

\b0 Programmatically determine if 42 lies between 10 and 100.\
Hint: Use Ruby\'92s range object in your solution.\
\

\b Answer
\b0 \

\f2 (10..100).include?(40)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
\cb1 Question 6\
\pard\pardeftab720\sl560\sa420\partightenfactor0

\b0 \cf11 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Starting with the string:\
\pard\pardeftab720\sl480\partightenfactor0
\cf13 \cb14 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 famous_words = \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "seven years ago..."\cf13 \cb1 \kerning1\expnd0\expndtw0 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\pardeftab720\sl560\sa420\partightenfactor0
\cf11 \cb12 \expnd0\expndtw0\kerning0
\strokec11 \shad0 show two different ways to put the expected "Four score and " in front of it.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 Answer\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\b0 \cf16 \cb6 \CocoaLigature0 1. \'94Four score and " + famous_words\
2. \'93Four score and \'93 << famous_words\
3. famous_words.prepend(\'93Four score and \'93)
\f4 \CocoaLigature1 \outl0\strokewidth0 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 \outl0\strokewidth0 \shad0 \

\b \
\
Question 7\
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3\b0 \cf11 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Fun with gsub:\
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf17 \cb14 \strokec17 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 def\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16  \cf18 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 add_eight\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 (number)\
  number + \cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 8\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\cf17 \strokec17 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 end\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\
number = \cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 2\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\
how_deep = \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "number"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 5\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 .times \{ how_deep.gsub!(\cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "number"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "add_eight(number)"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 ) \}\
\
p how_deep\
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3 \cf11 \cb12 \strokec11 \shad0 This gives us a string that looks like a "recursive" method call:\
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf15 \cb14 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "add_eight(add_eight(add_eight(add_eight(add_eight(number)))))"\cf13 \cb1 \kerning1\expnd0\expndtw0 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3 \cf11 \cb6 \expnd0\expndtw0\kerning0
\strokec11 \shad0 If we take advantage of Ruby's\'a0
\f4 Kernel#eval
\f3 \'a0method to have it execute this string as if it\'a0
\i were
\i0 \'a0a "recursive" method call\
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf18 \cb14 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 eval\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 (how_deep)\cb1 \kerning1\expnd0\expndtw0 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3 \cf11 \cb6 \expnd0\expndtw0\kerning0
\strokec11 \shad0 what will be the result?\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 Answer\

\f2\b0 42
\f0\b \
\
Question 8\
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3\b0 \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 If we build an array like this:\
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf13 \cb14 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 flintstones = [\cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Fred"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Wilma"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 ]\
flintstones << [\cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Barney"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Betty"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 ]\
flintstones << [\cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "BamBam"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Pebbles"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 ]\
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3 \cf11 \cb12 \strokec11 \shad0 We will end up with this "nested" array:\
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf13 \cb14 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 [\cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Fred"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Wilma"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , [\cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Barney"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Betty"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 ], [\cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "BamBam"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Pebbles"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 ]]\cb1 \kerning1\expnd0\expndtw0 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3 \cf11 \cb6 \expnd0\expndtw0\kerning0
\strokec11 \shad0 Make this into an un-nested array.\
\pard\pardeftab720\sl360\partightenfactor0

\f0\b \cf11 Answer
\f3\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 flintstones.flatten
\f0\b \
\cb1 \
Question 9\
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3\b0 \cf11 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Given the hash below\
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf13 \cb14 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 flintstones = \{ \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Fred"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16  => \cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 0\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Wilma"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16  => \cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 1\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Barney"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16  => \cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 2\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Betty"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16  => \cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 3\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "BamBam"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16  => \cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 4\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 , \cf15 \strokec15 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 "Pebbles"\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16  => \cf19 \strokec19 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 5\cf13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc16  \}\cb1 \kerning1\expnd0\expndtw0 \shad\shadx0\shady-20\shadr0\shado76 \shadc16 \
\pard\pardeftab720\sl560\sa420\partightenfactor0

\f3 \cf11 \cb12 \expnd0\expndtw0\kerning0
\strokec11 \shad0 Turn this into an array containing only two elements: Barney's name and Barney's number\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 Answer\

\f2\b0 flintstones.assoc(\'93Barney\'94)\

\f0\b \
\
\
\
\
\
\

\b0 \
}