Medium_2

Question 1
Predict how the values and object ids will change throughout the flow of the code below:
Answer
a_outer = 42
  b_outer = "forty two"
  c_outer = [42]
  d_outer = c_outer[0]

  a_outer_id = a_outer.object_id
  b_outer_id = b_outer.object_id
  c_outer_id = c_outer.object_id
  d_outer_id = d_outer.object_id
This is the first pass so each object id will be unique except that a_outer_id = d_outer_id

1.times do
    a_outer_inner_id = a_outer.object_id
    b_outer_inner_id = b_outer.object_id
    c_outer_inner_id = c_outer.object_id
    d_outer_inner_id = d_outer.object_id
This only prints the values for the original set of variables so no changes to ids yet.

    a_outer = 22
    b_outer = "thirty three"
    c_outer = [44]
    d_outer = c_outer[0]
This set of variables will have all new ids.

    a_inner = a_outer
    b_inner = b_outer
    c_inner = c_outer
    d_inner = c_inner[0]

    a_inner_id = a_inner.object_id
    b_inner_id = b_inner.object_id
    c_inner_id = c_inner.object_id
    d_inner_id = d_inner.object_id
The inner ids will be different from the outer ids since the values changed (were reassigned)

Question 2
Let's look at object id's again from the perspective of a method call instead of a block.
Here we haven't changed ANY of the code outside or inside of the block/method. We simply took the contents of the block from the previous practice problem and moved it to a method, to which we are passing all of our outer variables.
Predict how the values and object ids will change throughout the flow of the code below:
Answer
a_outer = 42
  b_outer = "forty two"
  c_outer = [42]
  d_outer = c_outer[0]

  a_outer_id = a_outer.object_id
  b_outer_id = b_outer.object_id
  c_outer_id = c_outer.object_id
  d_outer_id = d_outer.object_id
Same result as with question 1 since this is the first pass.

  an_illustrative_method(a_outer, b_outer, c_outer, d_outer, a_outer_id, b_outer_id, c_outer_id, d_outer_id)
This wouldn’t affect the ids since its just passing the objects to the method.

Biggest takeaway here is that a method call will accept values as parameters so the names used for the parameters won’t affect their use outside of the method. Seems to me like inner scope vs outer scope stuff going on here. 

Question 3
Let's call a method, and pass both a string and an array as parameters and see how even though they are treated in the same way by Ruby, the results can be different.
Study the following code and state what will be displayed...and why:
def tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabaga"
  an_array_param << "rutabaga"
end

my_string = "pumpkins"
my_array = ["pumpkins"]
tricky_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"


Answer 
my_string = “pumpkins” since string_param did not mutate my_string so the original my_string remained intact.
my_array = [“pumpkins”, “rutabaga”] was mutated by an_array_param because of the << operation so my_array was permanently changed.

Question 4
To drive that last one home...let's turn the tables and have the string show a modified output, while the array thwarts the method's efforts to modify the caller's version of it.
def tricky_method_two(a_string_param, an_array_param)
  a_string_param << 'rutabaga'
  an_array_param = ['pumpkins', 'rutabaga']
end

my_string = "pumpkins"
my_array = ["pumpkins"]
tricky_method_two(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"


Answer 
my_string = “pumpkinsrutabaga” since the method mutated my_string.
my_array = [‘pumpkins’]  since the original my_array is not mutated by the method.


Question 5
How could the unnecessary duplication in this method be removed?
def color_valid(color)
  if color == "blue" || color == "green"
    true
  else
    false
  end
end

Answer
You can edit out the if/else/false portions of the code and just leave color == “blue” || color == “green” inside the method.
